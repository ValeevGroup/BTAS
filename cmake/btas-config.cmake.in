# - CMAKE Config file for the BTAS package
# This will define the following CMake cache variables
#
#    BTAS_FOUND           - true if BTAS library were found
#    BTAS_VERSION         - the BTAS version
#    BTAS_EXT_VERSION     - the BTAS version including the (optional) buildid, such as beta.3
#
# and the following imported targets
#
#     BTAS::BTAS          - the BTAS library
#

# Set package version
set(BTAS_VERSION "@BTAS_VERSION@")
set(BTAS_EXT_VERSION "@BTAS_EXT_VERSION@")

@PACKAGE_INIT@

# import boost components, if any missing
set(Boost_BTAS_DEPS_LIBRARIES @Boost_BTAS_DEPS_LIBRARIES@)
foreach(_deplib ${Boost_BTAS_DEPS_LIBRARIES})
  if (DEFINED Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK)
    list(APPEND Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK OR)
  endif()
  list(APPEND Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK "NOT;TARGET;Boost::${_deplib}")
endforeach(_deplib)
if (NOT DEFINED Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK)
  list(APPEND Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK "NOT;TARGET;Boost::boost")
endif (NOT DEFINED Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK)

if(${Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK})
  set(Boost_USE_CONFIG @Boost_USE_CONFIG@)
  # OPTIONAL_COMPONENTS in FindBoost available since 3.11
  cmake_minimum_required(VERSION 3.11.0)
  if (Boost_USE_CONFIG)
    set(Boost_CONFIG @Boost_CONFIG@)
    if (NOT Boost_CONFIG OR NOT EXISTS ${Boost_CONFIG})
      message(FATAL_ERROR "Expected Boost config file at ${Boost_CONFIG}; directory moved since BTAS configuration?")
    endif()
    get_filename_component(Boost_DIR ${Boost_CONFIG} DIRECTORY)
    find_package(Boost CONFIG QUIET REQUIRED OPTIONAL_COMPONENTS ${Boost_BTAS_DEPS_LIBRARIES} PATHS ${Boost_DIR} NO_DEFAULT_PATH)
  else (Boost_USE_CONFIG)
    set(BOOST_INCLUDEDIR @Boost_INCLUDE_DIR@)
    set(BOOST_LIBRARYDIR @Boost_LIBRARY_DIR_RELEASE@)
    if (NOT BOOST_LIBRARYDIR OR NOT EXISTS ${BOOST_LIBRARYDIR})
      set(BOOST_LIBRARYDIR @Boost_LIBRARY_DIR_DEBUG@)
    endif()
    set(Boost_NO_SYSTEM_PATHS OFF)
    if (BOOST_LIBRARYDIR AND BOOST_INCLUDEDIR)
      if (EXISTS ${BOOST_LIBRARYDIR} AND EXISTS ${BOOST_INCLUDEDIR})
        set(Boost_NO_SYSTEM_PATHS ON)
      endif()
    endif()
    find_package(Boost QUIET REQUIRED OPTIONAL_COMPONENTS ${Boost_BTAS_DEPS_LIBRARIES})
  endif (Boost_USE_CONFIG)
endif(${Boost_BTAS_DEPS_LIBRARIES_NOT_FOUND_CHECK})

# find linalgpp dependencies
if(NOT TARGET blaspp)
  include( CMakeFindDependencyMacro )
  get_filename_component(blaspp_DIR "@blaspp_CONFIG@" DIRECTORY)
  if (NOT DEFINED BLAS_LIBRARIES AND NOT DEFINED blaspp_defs_)
    if (NOT "@BLAS_LIBRARIES@" STREQUAL "")
      set(BLAS_LIBRARIES "@BLAS_LIBRARIES@" CACHE STRING "BLAS_LIBRARIES used during BTAS configuration")
    endif()
    if (NOT "@blaspp_defs_@" STREQUAL "")
      set(blaspp_defs_ "@blaspp_defs_@" CACHE STRING "blaspp_defs_ used during BTAS configuration")
    endif()
  endif()
  find_dependency( blaspp CONFIG REQUIRED HINTS "${blaspp_DIR}" )
endif()
if(NOT TARGET lapackpp)
  include( CMakeFindDependencyMacro )
  get_filename_component(lapackpp_DIR "@lapackpp_CONFIG@" DIRECTORY)
  if (NOT DEFINED LAPACK_LIBRARIES AND NOT DEFINED lapackpp_defs_)
    if (NOT "@LAPACK_LIBRARIES@" STREQUAL "")
      set(LAPACK_LIBRARIES "@LAPACK_LIBRARIES@" CACHE STRING "LAPACK_LIBRARIES used during BTAS configuration")
    endif()
    if (NOT "@lapackpp_defs_@" STREQUAL "")
      set(lapackpp_defs_ "@lapackpp_defs_@" CACHE STRING "lapackpp_defs_ used during BTAS configuration")
    endif()
  endif()
  find_dependency( lapackpp CONFIG REQUIRED HINTS "${lapackpp_DIR}" )
endif()

# Include library IMPORT targets
if(NOT TARGET blaspp_headers)
  include("${blaspp_DIR}/blaspp_headers-targets.cmake")
  if(NOT TARGET blaspp_headers)
    message(FATAL_ERROR "expected blaspp_headers among imported BTAS targets")
  endif()
endif()
if(NOT TARGET BTAS::BTAS)
  include("${CMAKE_CURRENT_LIST_DIR}/btas-targets.cmake")
  if(NOT TARGET BTAS::BTAS)
    message(FATAL_ERROR "expected BTAS::BTAS among imported BTAS targets")
  endif()
endif()

set(BTAS_FOUND TRUE)
